library(reshape2)
?melt
meltData <- melt(data, id = c("subject, activity"), measure.vars = mean_std)
names(data)
meltData <- melt(data, id = c("subject, activity"), measure.vars = mean_std)
meltData <- melt(data, id.vars = c("subject, activity"), measure.vars = mean_std)
meltData <- melt(data, id = c("subject", "activity"), measure.vars = mean_std)
head(meltData, 20)
?dcast
meltData <- melt(data, id = c("subject", "activity"))
head(meltData, 20)
meltData <- melt(data, id = c("subject", "label", "activity"))
head(meltData, 20)
dcast(meltData, label ~ variable, mean)
dcast(meltData, c(subject, label) ~ variable, mean)
dcast(meltData, label ~ variable, mean)
dcast(meltData, subject ~ variable, mean)
dcast(meltData, subject  + label ~ variable, mean)
result <- dcast(meltData, subject  + label ~ variable, mean)
names(result)
head(result, 3)
result <- dcast(meltData, subject  + activity ~ variable, mean)
head(result, 3)
head(result, 30)
?write.file
?write.table
write.csv(result, file = "tidy.csv")
features$V2
?grep
gsub(features$V2, "(", "")
gsub("(", "", features$V2)
gsub("\(", "", features$V2)
gsub("\\(", "", features$V2)
gsub("(\\(\\))", "", features$V2)
gsub("(\\(|\\))", "", features$V2)
gsub("-", "_", gsub("(\\(|\\))", "", features$V2))
gsub("(\\(|\\))", "", features$V2)
gsub("-", "_", gsub("(\\(|\\))", "", features$V2))
gsub("[-,]", "_", gsub("(\\(|\\))", "", features$V2))
gsub("[-,]", "_", gsub("[\\(\\)]", "", features$V2))
featureColumns = gsub("[-,]", "_", gsub("[\\(\\)]", "", features$V2))
featureColumns[c(grep(".mean.", featureColumns, fixed = TRUE), grep(".std.", featureColumns, fixed = TRUE))]
featureColumns
mean_stg
mean_std
featureColumns
mean_std
names(data)
featureColumns
grep("gravity", names(data))
names(data)
grep(".gravity.\", names(data))
grep(".gravity.\", names(data))
grep(".gravity.\", names(data))
)
1
grep(".gravity.", names(data))
grep(".Gravity.", names(data))
grep("Gravity", names(data))
names(data)[grep("Gravity", names(data))]
featureColumns[grep("Gravity", featureColumns]
featureColumns[grep("Gravity", featureColumns)]
features$V2
x <- matrix(1:4, c(2,2))
x
names(x)
names(x) <- c("a", "b")
x
df <- as.data.frame(x)
df
names(df) <- c("a", "b")
df
names(df) <- c("a-1", "b-2")
df
names(x_test)
names(df) <- c("a()", "b()")
df
?read.table
names(x_test)
names(x_test) <- features$V2
names(x_test)
featureColumns <-  features$V2
features  <- read.table("features.txt", stringsAsFactors=FALSE)
featureColumns <-  features$V2
featureColumns[grep("mean\\(", featureColumns, fixed = TRUE), fixed = TRUE))]
featureColumns[grep("mean\\(", featureColumns, fixed = TRUE), fixed = TRUE)]
featureColumns[grep("mean\\(", featureColumns, fixed = TRUE)]
featureColumns[grep("mean", featureColumns, fixed = TRUE)]
featureColumns[grep("mean\(", featureColumns, fixed = TRUE)]
featureColumns[grep("mean\\(", featureColumns, fixed = TRUE)]
featureColumns[grep("mean[\\(]", featureColumns, fixed = TRUE)]
featureColumns[grep("[\\(]", featureColumns, fixed = TRUE)]
featureColumns[grep("(", featureColumns, fixed = TRUE)]
featureColumns[grep("mean(", featureColumns, fixed = TRUE)]
featureColumns[grep("[mean(]", featureColumns, fixed = TRUE)]
featureColumns[grep("[mean\\(]", featureColumns, fixed = TRUE)]
featureColumns[grep("(mean\\()", featureColumns, fixed = TRUE)]
featureColumns[grep("mean(|std(", featureColumns, fixed = TRUE)]
featureColumns[grep("std(", featureColumns, fixed = TRUE)]
?grep
featureColumns[grep("std(", featureColumns)]
featureColumns[grep("std\\(", featureColumns)]
featureColumns[grep("[mean\\(|std\\(]", featureColumns)]
featureColumns[grep("(mean\\(|std\\()", featureColumns)]
x_test <- read.table("test/x_test.txt", stringsAsFactors=FALSE, col.names = featureColumns, check.names = FALSE)
names(x_test)
source("HumanActivityRecognitionUsingSmartphones.R")
source("HumanActivityRecognitionUsingSmartphones.R")
write.table(tidy, file = "tidy.txt", row.names = FALSE)
dt <- read.table("tidy.txt")
dt
head(dt, 3)
?read.table
dt <- read.table("tidy.txt", header = TRUE)
head(dt, 3)
?getwd
getwd()
setwd("../exdata-data-NEI_data")
getwd()
list.files()
?readRDS
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
names(NEI)
head(NEI, 5)
names(SCC)
head(SCC, 5)
?hist
names(NEI)
plot(NEI$year, NEI$Emissions, type = "l")
?plot
?aggregate
aggregate(NEI, by = "Emissions", FUN = sum)
aggregate(NEI, by = list("Emissions"), FUN = sum)
aggregate(Emissions ~ year, NEI, sum)
totalEmissionsByYear <- aggregate(Emissions ~ year, NEI, sum)
plot(totalEmissionsByYear$year, totalEmissionsByYear$Emissions, type = "l")
getwd()
totalEmissionsByYearBaltimore <- aggregate(Emissions ~ year, NEI[NEI$fips == "24510", ], sum)
plot(totalEmissionsByYearBaltimore$year, totalEmissionsByYearBaltimore$Emissions, type = "l")
unique(NEI$Pollutant)
names(NEI)
unique(SCC)
unique(NEI$SCC)
names(SCC)
SCC[SCC$SCC == "2415245000", ]
ggplot2
library(ggplot2)
?qplot
qplot(year, Emissions, data = NEI, facets = type)
qplot(year, Emissions, data = NEI, facets = "type")
qplot(year, Emissions, data = NEI, facets = .~type)
totalEmissionsByYearAndType <- aggregate(Emissions ~ year + type, NEI[NEI$fips == "24510", ], sum)
totalEmissionsByYearAndType
qplot(year, Emissions, data = totalEmissionsByYearAndType, facets = .~type)
?qplot
qplot(year, Emissions, data = totalEmissionsByYearAndType, facets = .~type, geom = "smooth")
names(SCC)
unique(SCC$Data.Category)
unique(SCC$Short.Name)
unique(SCC$Data.Category)
unique(SCC$Data.Category)
names(SCC)
unique(SCC$EI.Sector)
names(SCC)
unique(SCC$Option.Group)
unique(SCC$Option.Set)
unique(SCC$SCC.Level.One)
unique(SCC$SCC.Level.Two)
names(SCC)
unique(SCC$EI.Sector)
?grep
grep("coal", unique(SCC$EI.Sector), ignore.case = TRUE)
unique(SCC$EI.Sector)[grep("coal", unique(SCC$EI.Sector), ignore.case = TRUE)]
names(SCC)
sector <- unique(SCC$EI.Sector)[grep("coal", unique(SCC$EI.Sector), ignore.case = TRUE)]
short <- unique(SCC$Short.Name)[grep("coal", unique(Short.Name), ignore.case = TRUE)]
short <- unique(SCC$Short.Name)[grep("coal", unique(SCC$Short.Name), ignore.case = TRUE)]
short
short <- unique(SCC$Short.Name)[grep("comb.coal", unique(SCC$Short.Name), ignore.case = TRUE)]
short
short <- unique(SCC$Short.Name)[grep("comb.*coal", unique(SCC$Short.Name), ignore.case = TRUE)]
short
SCC[SCC$EI.Sector %in% sector, ]
s1 <- SCC[SCC$EI.Sector %in% sector, ]
s2 <- SCC[SCC$Short.Name %in% short, ]
s1$Short.Name
names(s1)
s1$SCC
SCC[c("SCC", "Short.Name"]
SCC[c("SCC", "Short.Name")]
s2$Short.Name
sector
sector <- unique(SCC$EI.Sector)[grep("comb.*coal", unique(SCC$EI.Sector), ignore.case = TRUE)]
sector
unique(SCC$EI.Sector)[grep("coal.*comb", unique(SCC$EI.Sector), ignore.case = TRUE)]
SCC[SCC$EI.Sector %in% sector, "SCC"]
sccCoal <- SCC[SCC$EI.Sector %in% sector, "SCC"]
totalEmissionsByYearForCoalCombustion <- aggregate(Emissions ~ year, NEI[NEI$SCC %in% sccCoal, ], sum)
totalEmissionsByYearForCoalCombustion
?hist
hist(totalEmissionsByYearForCoalCombustion$Emissions)
plot(totalEmissionsByYearForCoalCombustion$year, totalEmissionsByYearForCoalCombustion$Emissions, type = "l")
sector <- unique(SCC$EI.Sector)[grep("motor", unique(SCC$EI.Sector), ignore.case = TRUE)]
sector
sector <- unique(SCC$EI.Sector)[grep("vehicle", unique(SCC$EI.Sector), ignore.case = TRUE)]
sector
sccVehicle <- SCC[SCC$EI.Sector %in% sector, "SCC"]
sccVehicle
totalEmissionsByYearForVehiclesInBaltime <- aggregate(Emissions ~ year, NEI[NEI$SCC %in% sccCoa & NEI$fips == "24510", ], sum)
totalEmissionsByYearForVehiclesInBaltime <- aggregate(Emissions ~ year, NEI[NEI$SCC %in% sccVehicle & NEI$fips == "24510", ], sum)
NEI[NEI$SCC %in% sccVehicle & NEI$fips == "24510", ]
NEI[NEI$SCC %in% sccVehicle & NEI$fips == "24510", "SCC"]
plot(totalEmissionsByYearForVehiclesInBaltime$year, totalEmissionsByYearForVehiclesInBaltime$Emissions, type = "l")
qplot(year, Emissions, data = totalEmissionsByYearAndType, facets = .~type, geom = "smooth")
qplot(year, Emissions, data = totalEmissionsByYearAndType, facets = .~type, geom = "line")
?qplot
totalEmissionsByYearAndType
totalEmissionsByYearForVehicles <- aggregate(Emissions ~ year + fips, NEI[NEI$SCC %in% sccVehicle & NEI$fips %in% c("24510", "06037")], sum)
totalEmissionsByYearForVehicles <- aggregate(Emissions ~ year + fips, NEI[NEI$SCC %in% sccVehicle & NEI$fips %in% c("24510", "06037"), ], sum)
totalEmissionsByYearForVehicles
qplot(year, Emissions, data = totalEmissionsByYearAndType, facets = .~fips, geom = "line")
totalEmissionsByYearForVehicles
qplot(year, Emissions, data = totalEmissionsByYearForVehicles, facets = .~fips, geom = "line")
?qplot
?png
source("plot1.R")
source("plot2.R")
source("plot3.R")
source("plot3.R")
source("plot4.R")
source("plot5.R")
qplot(year, Emissions, data = totalEmissionsByYearAndTypeInBaltimore, color = type, geom = "line")
?ggplot
g <- ggplot(totalEmissionsByYearAndTypeInBaltimore, aes(year, Emissions, color = type)
)
g <- ggplot(totalEmissionsByYearAndTypeInBaltimore, aes(year, Emissions))
g + geom_line(aes(color = type))
ggplot(totalEmissionsByYearAndTypeInBaltimore, aes(year, Emissions, color = type, geom = "line"))
?qplot
source("plot6.R")
source("plot6.R")
source("plot3.R")
source("plot1.R")
source("plot1.R")
source("plot2.R")
source("plot4.R")
source("plot5.R")
?qplot
?data.frame
county <- c("Baltimore City", "Los Angeles")
fips <- c("24510", "06037")
fipsCounty <- data.frame(county, fips)
fipsCounty
totalEmissionsByYearForVehicles <- merge(totalEmissionsByYearForVehicles, fipsCounty, by.x = "fips", by.y = "fips")
totalEmissionsByYearForVehicles
qplot(year, Emissions, data = totalEmissionsByYearForVehicles, color = county, geom = "line")
fipsCounty <- data.frame(fips, county)
fipsCounty
source("plot3.R")
source("plot6.R")
qplot(year, Emissions, data = totalEmissionsByYearForVehicles, color = county, geom = "line", xlab = "Year")
source("plot3.R")
source("plot6.R")
getwed()
getwd()
source("plot3.R")
library("ggplot2")
qplot(
year,
Emissions,
data = totalEmissionsByYearAndTypeInBaltimore,
color = type,
geom = "line",
main = "PM 2.5 Emissions by Source Type - Baltimore City, Maryland",
xlab = "Year",
ylab = "Total Emissions(tons)"
)
print(
qplot(
year,
Emissions,
data = totalEmissionsByYearAndTypeInBaltimore,
color = type,
geom = "line",
main = "PM 2.5 Emissions by Source Type - Baltimore City, Maryland",
xlab = "Year",
ylab = "Total Emissions(tons)"
)
)
dev.off()
png("plot3.png")
print(
qplot(
year,
Emissions,
data = totalEmissionsByYearAndTypeInBaltimore,
color = type,
geom = "line",
main = "PM 2.5 Emissions by Source Type - Baltimore City, Maryland",
xlab = "Year",
ylab = "Total Emissions(tons)"
)
)
dev.off()
source("plot6.R")
?download.file
setwd("..")
getwd()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "getdata-data-ss06hid.csv")
df <- read.csv("getdata-data-ss06hid.csv")
head df(, 5)
head(df), 5)
head(df, 5)
?strsplit
names(df)
strsplit(names(df), "wgtp")
strsplit(names(df), "wgtp")[123]
gdp <- read.csv("getdata-data-GDP.csv")
names(gdp)
?read.csv
gdp <- read.csv("getdata-data-GDP.csv", skip=5)
gdp
gdp[1, ]
gdp <- read.csv("getdata-data-GDP.csv", skip=5, header=F)
gdp[1, ]
class(gdp$V5)
gdp <- read.csv("getdata-data-GDP.csv", skip=5, header=F, stringsAsFactors=F)
class(gdp$V5)
as.numeric(gdp$V5)
?gsub
gsub(",", "", gdp$V5)
as.numeric(gsub(",", "", gdp$V5))
?mean
mean(as.numeric(gsub(",", "", gdp$V5)), na.rm = TRUE)
mean(as.numeric(gsub(",", "", gdp$V5[1:193])), na.rm = TRUE)
gdp[194,]
gdp[195,]
gdp[196,]
gdp[197,]
gdp[19221,]
gdp[221,]
gdp[222,]
gdp[215,]
gdp <- gdp[215,]
mean(as.numeric(gsub(",", "", gdp$V5)), na.rm = TRUE)
gdp
gdp <- read.csv("getdata-data-GDP.csv", skip=5, header=F, stringsAsFactors=F)
gdp <- gdp[1:215,]
mean(as.numeric(gsub(",", "", gdp$V5)), na.rm = TRUE)
head(gdp, 1)
grep("United$", gdp$V4)
grep("^United", gdp$V4)
grep("*United", gdp$V4)
gdp[grep("^United", gdp$V4), ]
edu <- read.csv("getdata-data-EDSTATS_Country.csv", stringsAsFactors=F)
names(edu)
summary(edu)
names(edu)
?merge
names(gdp)
head(gdp, 1)
names(gdp) <- c("CountryCode", "Rank", "CountryName", "GDP")
names(gdp)
head(gdp, 1)
names(gdp) <- c("CountryCode", "Rank", "CountryName", "UNK1", "GDP")
head(gdp, 1)
names(gdp) <- c("CountryCode", "Rank", "UNK1", "CountryName", "GDP")
head(gdp, 1)
head(gdp, 1)[, 1:5]
gdp <- gdp[, 1:5]
head(gdp, 1)
gdp
names(edu)
names(gdp)
gdpedu <- merge(gdp, edu, by.x = "CountryCode", by.y = "CountryCode", all = FALSE)
names(gdpedu)
?grep
grep("Fiscal", gdpedu$Special.Notes)
gdpedu$Special.Notes[grep("Fiscal", gdpedu$Special.Notes)
)
gdpedu$Special.Notes[grep("Fiscal", gdpedu$Special.Notes)]
gdpedu$Special.Notes[grep("Fiscal year end: June 30", gdpedu$Special.Notes)]
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
names(amzn)
names(sampleTimes)
?index
sampleTimes
grep("2012", sampleTimes)
nrows(grep("2012", sampleTimes))
nrow(grep("2012", sampleTimes))
ncol(grep("2012", sampleTimes))
grep("2012", sampleTimes)
as.date(sampleTimes)
as.Date(sampleTimes)
class(sampleTimes)
?day
?Day
weekdays(sampleTimes)
grep("2012", sampleTimes)
sampleTimes[grep("2012", sampleTimes)]
weekdays(sampleTimes[grep("2012", sampleTimes)])
grep("Monday", weekdays(sampleTimes[grep("2012", sampleTimes)]))
md <- grep("Monday", weekdays(sampleTimes[grep("2012", sampleTimes)]))
md
ncol(md)
nrow(md)
size(md)
len
length
length(md)
title: "demo"
library(knitr)
library(markdown)
1.645 * 75 + 1100
1.645 * 75 / 100 + 1100
1.645 * 75 / 10 + 1100
choose(5, 4)
choose(5, 3)
choose(5, 2)
choose(5, 1)
choose(5, 0.3)
choose(5, 4) * 0.5 ^ 5
choose(5, 4) * 0.5 ^ 5 + choose(5, 5) * 0.5 ^ 5
1/12/sqrt(1000)
1/12/10
ppois(10, lambda = 5 * 3)
1/12/sqrt(1000)
sqrt(1/12/1000)
sqrt(1/12/100)
setpwd("C:\Users\Brendan\Documents\GitHub\RepData_PeerAssessment1")
setpwd("C:/Users/Brendan/Documents/GitHub/RepData_PeerAssessment1")
setpd("C:/Users/Brendan/Documents/GitHub/RepData_PeerAssessment1")
setwd("C:/Users/Brendan/Documents/GitHub/RepData_PeerAssessment1")
getwd()
dir
list
dir
?dir
list.files
list.files(getwd())
unzip
unzip("activity.zip")
read.csv("activity.zip")
data <- read.csv("activity.zip")
?read.csv
data <- read.csv("activity.zip", header = TRUE, sep = ",")
data <- read.csv("activity.csv")
head(data, 1)
library(ggplot)
library(ggplot2)
?ggplot2
?ggplot
rm(data)
library(ggplot2)
?clean.cases
?cases
?clean
raw <-  read.csv("activity.csv")
activity <- complete.cases(raw)
activity <- complete.cases(read.csv("activity.csv"))
activity
activity <- activity[complete.cases(raw), ]
activity <- raw[complete.cases(raw), ]
activity
hist(activity)
head(activity)
stepsByDate <-aggregate(steps ~ date, , sum)
?aggregate
stepsByDate <-aggregate(steps ~ date, sum)
stepsByDate <-aggregate(steps ~ date, activity, sum)
stepsByDate
hist(stepsByDate)
classes(activity)
class(activity)
class(raw)
colclass(raw)
colclasses(raw)
lapply(activity, class)
?read.csv
raw <- read.csv("activity.csv", stringsAsFactors = FALSE)
activity <- raw[complete.cases(raw), ]
lapply(activity, class)
colClasses <- lapply(activity, class)
colClasses
class(colClasses$date)
class(colClasses$steps)
activity
activity$date <- activity$date
?strptime
activity$date <- striptime(activity$date, format = "%Y-%m-%d")
activity$date <- strptime(activity$date, format = "%Y-%m-%d")
activity$date
lapply(activity, class)
activity <- raw[complete.cases(raw), ]
activity$date <- as.Date(activity$date, format = "%Y-%m-%d")
?as.Date
activity$date
class(activity$date)
?aggregate
names(activity)
aggregate(steps ~ date, data = activity, sum)
stepsByDate <- aggregate(steps ~ date, data = activity, sum)
hist(stepsByDate)
hist(stepsByDate$steps)
?hist
hist(stepsByDate$steps)
